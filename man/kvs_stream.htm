<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>STREAM</title>
    <link rel="stylesheet" href="https://n2o.space/n2o.css" />
</head>

<body>

<header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg"></a>
    <h1>STREAM</h1>
</header>

<main>
    <section>

<h3>INTRO</h3>

<p>The <b>kvs_stream</b> is intended to store and retrieve doubly-linked lists using
   simple key-value access to different databases through its backends:
   redis, mongo, mnesia, riak, kai, fs.
   The main descriptor of the list is the cursor which holds the cached value of one of list elements
   and also two pointers to first and last elements along with default traversal direction.
   Cursor should be stored in databse, if there is no cursor for some data then this data is not alive yet.
   The data could be added only to list ends.
   The data in list could be removed only by record id.
   The list could not contain duplicates or even records with the same id.
   When you consume the stream, the data is not deleted.</p>
    </section>
    <section>

<h3>RECORDS</h3>

<figure><figcaption>KVS CORE</figcaption><code>
    #ok { data= [] :: term() }.

 #error { data= [] :: term() }.

   #cur { id=   [] :: term(),
          val=  [] :: [] | tuple(),
          dir=   0 ::  0 | 1,
          top=  [] :: [] | integer(),
          bot=  [] :: [] | integer()}).

  #iter { id=   [] :: [] | integer(),
          prev= [] :: [] | integer(),
          next= [] :: [] | integer()).

</code></figure>

<p><ul>
<li>id &mdash; Unique key of the cursor</li>
<li>val &mdash; Cached value of current element of the list</li>
<li>dir &mdash; 0 from top do next, 1 from bot do prev.</li>
<li>top &mdash; The top of the list</li>
<li>bot &mdash; The bottom of the list</li>
</ul></p>

<p><ul>
<li>id &mdash; Unique key of the record in the list</li>
<li>next &mdash; The next element of the list</li>
<li>prev &mdash; The prev element of the list</li>
</ul></p>

    </section>
    <section>

<h3>EXAMPLE</h3>

<figure><code>
-module(test).
-include_lib("kvs/include/kvs.hrl").
-include_lib("kvs/include/user.hrl").
-compile(export_all).

check() ->
    Cur = new(),
    [A,B,C,D] = [ kvs:next_id(person,1)
             || _ <- lists:seq(1,4) ],
    R = save(add(top,#person{id=A},
             add(bot,#person{id=B},
             add(top,#person{id=C},
             add(bot,#person{id=D}, Cur ))))),
    X = take(-1,down(top(R))),
    Y = take(-1,up(bot(R))),
    X = lists:reverse(Y),
    L = length(X).

 > test:check().
 4

 > kvs:all(cur).
 [{cur,1,{person,1,3,[],[],[],[],[],[]},0,1,2}]

 > kvs_stream:take(-1,
   kvs_stream:top(kvs:get(cur,1))).
[{person,2,[],4,[],[],[],[],[]},
 {person,4,2,3,[],[],[],[],[]},
 {person,3,4,1,[],[],[],[],[]},
 {person,1,3,[],[],[],[],[],[]}]

</code></figure>
    </section>
    <section>

<h3>API</h3>

<p>We prepared for you sequential steps manual.
   Just enter the erlang commands in shell in right order
   and check the results.

<h4>new() -> #cur{}.</h4>

<p>Creates a KVS cursor.</p>

<figure><code>
 > kvs_stream:new().
 {cur,1,[],0,[],[]}
 > kvs:get(id_seq,"cur").
 {ok,{id_seq,"cur",1}}
 > kvs_stream:new().
 {cur,2,[],0,[],[]}
 > kvs:get(id_seq,"cur").
 {ok,{id_seq,"cur",2}}

</code></figure>

<h4>save(#cur{}) -> #cur{}.</h4>

<p>Saves the cursor to database.<?p>

<figure><code>
 > kvs:all(cur).
 []
 > kvs_stream:save(kvs_stream:new()).
 {cur,3,[],0,[],[]}
 > kvs:all(cur).
 [{cur,3,[],0,[],[]}]

</code></figure>

<h4>load(Id) -> #ok{data::#cur{}} | #error{}.</h4>

<p>Gets a cursor from database.</p>

<figure><code>
  > kvs_stream:load(3).
  {cur,3,[],[],0,[]}

</code></figure>

<h4>add(Message,#cur{}) -> #cur{}.</h4>

<p>Adds message to datatabase and update cursor to new data.
   Message is linked on next prev fields with existed data under cursor.
   If cursor doesn't contain top or bottom value the additional
   seek to the end is performed according to cursor direction.</p>

<figure><code>
 > rr(kvs_user).
 [block,column,container,cur,group,id_seq,iter,iterator,kvs,
  log,operation,person,query,schema,table,user]

 > kvs_stream:save(
   kvs_stream:add(#person{},
   kvs_stream:load(3))).
 #cur{id = 4,top = 1,bot = 1,dir = 0,
      val = #person{id = 1,next = [],prev = [],mail = [],
                    name = [],pass = [],zone = [],type = []}}

</code></figure>

<h4>prev(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to prev. Consume data bottom up.
   Reutrn error if lists is empty, otherwise next element or last.</p>

<figure><code>
 > kvs_stream:prev(kvs_stream:load(3)).
 {error,#cur{id = 3,top = 1,bot = 1,dir = 0,
             val = #person{id = 1,next = [],prev = [],mail = [],
                           name = [],pass = [],zone = [],type = []}}}

</code></figure>

<h4>next(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to next. Consume data top down.
   Reutrn error if lists is empty, otherwise next element or last.</p>

<figure><code>
 > kvs_stream:next(
   kvs_stream:save(
   kvs_stream:add(#person{},
   kvs_stream:load(3)))).
 #cur{id = 3,top = 2,bot = 1,dir = 0,
      val = #person{id = 1,next = [],prev = 2,mail = [],name = [],
                     pass = [],zone = [],type = []}}

</code></figure>

<h4>seek(Id,#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to record by its id.
   If cursor has no cached value then function returns error.</p>

<figure><code>
 >  kvs_stream:seek(2,
    kvs_stream:save(
    kvs_stream:add(#person{id=kvs:next_id(person,1)},
    kvs_stream:load(3)))).
 #cur{id = 3,top = 3,bot = 1,dir = 0,
      val = #person{id = 2,next = 1,prev = 3,mail = [],name = [],
                    pass = [],zone = [],type = []}}

</code></figure>

<h4>top(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to top of the list.</p>

<figure><code>
 > kvs_stream:top(
   kvs_stream:load(3)).
 #cur{id = 3,top = 3,bot = 1,dir = 0,
      val = #person{id = 3,next = 2,prev = [],mail = [],name = [],
                    pass = [],zone = [],type = []}}

</code></figure>

<h4>bot(#cur{}) -> #cur{} | #error{}.</h4>

<p>Moves cursor to bottom of the list.</p>

<figure><code>
 > kvs_stream:bot(kvs_stream:load(3)).
 #cur{id = 3,top = 3,bot = 1,dir = 0,
      val = #person{id = 1,next = [],prev = 2,mail = [],name = [],
                    pass = [],zone = [],type = []}}

</code></figure>

<h4>take(N,#cur{}) -> list().</h4>

<p>Trying to consume N records from stream using its current value and direction.
   Returns consumed data. Usually you seek to some position and then consume some data.</p>

<figure><code>
 > kvs_stream:take(-1,kvs_stream:load(3)).
 [#person{id = 1,next = [],prev = 2, mail = [],name = [],
          pass = [],zone = [],type = []},
  #person{id = 2,next = 1,prev = 3,mail = [],name = [],
          pass = [],zone = [],type = []},
  #person{id = 3,next = 2,prev = [],mail = [],name = [],
          pass = [],zone = [],type = []}]

</code></figure>

<h4>remove(Id,#cur{}) -> #cur{} | #error{}.</h4>

<p>Removes record by id from database and unlink it from list.
   If cursor has no cached value then function returns error.
   Please do not use remove, keep your data immutable :-)</p>

<figure><code>
 > kvs_stream:take(-1,
   kvs_stream:save(
   kvs_stream:remove(2,
   kvs_stream:load(3)))).
 [#person{id = 1,next = [],prev = 3,mail = [],name = [],
          pass = [],zone = [],type = []},
  #person{id = 3,next = 1,prev = [],mail = [],name = [],
          pass = [],zone = [],type = []}]

</code></figure>

    </section>
    <section>

<h3>CONFIG</h3>

<p>In sys.config you should specify kvs backend and list of modules containing <b>metainfo/0</b> exported function.</p>

<figure><code>
  [{kvs, [{dba, store_mnesia},
          {schema, [kvs]} ]}].

</code></figure>

    </section>
    <section>

<p>This module may refer to:
<a href="http://erlang.org/doc/man/mnesia.html">mnesia</a></b>,
<a href="kvs.htm"><b>kvs</b></a>.
</p>

    </section>
</main>

<footer>
    2005&mdash;2017 &copy; Synrc Research Center
</footer>

</body>
</html>
